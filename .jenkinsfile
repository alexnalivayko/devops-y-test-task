def internalTestAgents = [
    [ name: "Python 2.7", image: "python:2.7.18-alpine3.11", cmd: 'pip' ], 
    [ name: "Python 3.2", image: "python:3.2-alpine", cmd: 'pip3' ], 
    [ name: "Latest Python", image: "python:latest", cmd: 'pip3' ] 
]

def lintTest = [
    [ name: 'flake8', command: 'flake8 ./*.py --format=pylint' ],
    [ name: 'pylint', command: 'pylint ./ --output-format=text' ]
]

def parallelUnitTestsMap = internalTestAgents.collectEntries {
    ["Test's FOR ${ it.name }": runUnitTest(it.name, it.image)]
}

def parallelLintsMap = lintTest.collectEntries {
    ["Lint by ${ it.name }": runLint(it.name, it.command, internalTestAgents)]
}

pipeline {
    agent any
    options {
        timestamps()
    }
    environment {
        SOURCE_DIR = "src"
        TESTS_DIR = "tests"
    }
    stages {
        stage('Prepare pipeline') {
            steps {
                script {
                    stash name: "source-data", includes: "**/*"
                }
            }
        }
        stage('Code Lint') {
            steps {
                script {
                    parallel parallelLintsMap
                }
            }
        }

        stage('Unit tests') {
            steps {
                script {
                    parallel parallelUnitTestsMap
                }
            }
        }

        stage ('Call another pipeline') {
            steps {
                echo "call another job"
            }
        }
    }
    post {
        always {
            cleanWs notFailBuild: true
        }
    }
}

def runUnitTest(String pythonVersion, String agentImage) {
    return {
        node {
            docker.image(agentImage).inside() {
                stage ("UNIT for ${ pythonVersion }") {
                    echo "Run unit tests on ${ agentImage } with image ${ pythonVersion }"
                    sh "python --version"
                }
            }
        }
    }
}

def runLint(String frameworkName, String command, agents) {
    return {
        node {
            agents.each { agent ->
                docker.image(agent.image).inside() {
                    stage ("Lint by \"${ frameworkName }\" on \"${ agent.name }\"") {
                        echo "Run lint by \"${ frameworkName }\" on \"${ agent.image }\" stack"
                        
                        unstash 'source-data'
                        
                        sh "${agent.cmd} install ${ frameworkName }" // pip install flake8

                        def result = sh script: command, returnStdout: true 
                        
                        echo "\"${ frameworkName }:${ agent.name }\" RESULT: ${ result }"
                    }
                }
            }
        }
    }
}